// <auto-generated />
using System;
using DAOClassLibrary;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DAOClassLibrary.Migrations
{
    [DbContext(typeof(WikiDbContext))]
    [Migration("20190527031132_CreateDataBase")]
    partial class CreateDataBase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ModelClassLibrary.DataDocumento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DocumentoId");

                    b.Property<DateTime>("GetDate");

                    b.HasKey("Id");

                    b.HasIndex("DocumentoId");

                    b.ToTable("DataDocumento");
                });

            modelBuilder.Entity("ModelClassLibrary.Documento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CorpoDocumento");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int?>("DocumentoId");

                    b.Property<bool>("Temporario");

                    b.Property<string>("Titulo");

                    b.Property<int?>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("DocumentoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("GetDocumentos");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Documento");
                });

            modelBuilder.Entity("ModelClassLibrary.ImagensDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("ArrayByte");

                    b.Property<string>("CaminhoImagem");

                    b.Property<int?>("DocumentoId");

                    b.Property<string>("NomeImagem");

                    b.HasKey("Id");

                    b.HasIndex("DocumentoId");

                    b.ToTable("GetImagens");
                });

            modelBuilder.Entity("ModelClassLibrary.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Nome");

                    b.Property<string>("NomeUsuario");

                    b.Property<string>("Senha");

                    b.HasKey("Id");

                    b.ToTable("GetUsuarios");
                });

            modelBuilder.Entity("ModelClassLibrary.DocTemporario", b =>
                {
                    b.HasBaseType("ModelClassLibrary.Documento");

                    b.Property<int>("Aprovado");

                    b.Property<int>("IdDocOrigem");

                    b.HasDiscriminator().HasValue("DocTemporario");
                });

            modelBuilder.Entity("ModelClassLibrary.DataDocumento", b =>
                {
                    b.HasOne("ModelClassLibrary.Documento", "Documento")
                        .WithMany("Datas")
                        .HasForeignKey("DocumentoId");
                });

            modelBuilder.Entity("ModelClassLibrary.Documento", b =>
                {
                    b.HasOne("ModelClassLibrary.Documento")
                        .WithMany("DocumentoFilho")
                        .HasForeignKey("DocumentoId");

                    b.HasOne("ModelClassLibrary.Usuario", "Usuario")
                        .WithMany("Documentos")
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("ModelClassLibrary.ImagensDoc", b =>
                {
                    b.HasOne("ModelClassLibrary.Documento", "Documento")
                        .WithMany("ListImagensDocs")
                        .HasForeignKey("DocumentoId");
                });
#pragma warning restore 612, 618
        }
    }
}
